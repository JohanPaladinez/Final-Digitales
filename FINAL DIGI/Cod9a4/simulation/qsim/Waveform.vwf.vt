// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2023 18:35:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cod9a4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cod9a4_vlg_sample_tst(
	N0,
	N1,
	N2,
	N3,
	N4,
	N5,
	N6,
	N7,
	N8,
	N9,
	sampler_tx
);
input  N0;
input  N1;
input  N2;
input  N3;
input  N4;
input  N5;
input  N6;
input  N7;
input  N8;
input  N9;
output sampler_tx;

reg sample;
time current_time;
always @(N0 or N1 or N2 or N3 or N4 or N5 or N6 or N7 or N8 or N9)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cod9a4_vlg_check_tst (
	A0,
	A1,
	A2,
	A3,
	M,
	sampler_rx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  M;
input sampler_rx;

reg  A0_expected;
reg  A1_expected;
reg  A2_expected;
reg  A3_expected;
reg  M_expected;

reg  A0_prev;
reg  A1_prev;
reg  A2_prev;
reg  A3_prev;
reg  M_prev;

reg  A0_expected_prev;
reg  A1_expected_prev;
reg  A2_expected_prev;
reg  A3_expected_prev;
reg  M_expected_prev;

reg  last_A0_exp;
reg  last_A1_exp;
reg  last_A2_exp;
reg  last_A3_exp;
reg  last_M_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	A0_prev = A0;
	A1_prev = A1;
	A2_prev = A2;
	A3_prev = A3;
	M_prev = M;
end

// update expected /o prevs

always @(trigger)
begin
	A0_expected_prev = A0_expected;
	A1_expected_prev = A1_expected;
	A2_expected_prev = A2_expected;
	A3_expected_prev = A3_expected;
	M_expected_prev = M_expected;
end



// expected A3
initial
begin
	A3_expected = 1'bX;
end 

// expected A2
initial
begin
	A2_expected = 1'bX;
end 

// expected A1
initial
begin
	A1_expected = 1'bX;
end 

// expected A0
initial
begin
	A0_expected = 1'bX;
end 

// expected M
initial
begin
	M_expected = 1'bX;
end 
// generate trigger
always @(A0_expected or A0 or A1_expected or A1 or A2_expected or A2 or A3_expected or A3 or M_expected or M)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A0 = %b | expected A1 = %b | expected A2 = %b | expected A3 = %b | expected M = %b | ",A0_expected_prev,A1_expected_prev,A2_expected_prev,A3_expected_prev,M_expected_prev);
	$display("| real A0 = %b | real A1 = %b | real A2 = %b | real A3 = %b | real M = %b | ",A0_prev,A1_prev,A2_prev,A3_prev,M_prev);
`endif
	if (
		( A0_expected_prev !== 1'bx ) && ( A0_prev !== A0_expected_prev )
		&& ((A0_expected_prev !== last_A0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A0_expected_prev);
		$display ("     Real value = %b", A0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A0_exp = A0_expected_prev;
	end
	if (
		( A1_expected_prev !== 1'bx ) && ( A1_prev !== A1_expected_prev )
		&& ((A1_expected_prev !== last_A1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A1_expected_prev);
		$display ("     Real value = %b", A1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A1_exp = A1_expected_prev;
	end
	if (
		( A2_expected_prev !== 1'bx ) && ( A2_prev !== A2_expected_prev )
		&& ((A2_expected_prev !== last_A2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A2_expected_prev);
		$display ("     Real value = %b", A2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A2_exp = A2_expected_prev;
	end
	if (
		( A3_expected_prev !== 1'bx ) && ( A3_prev !== A3_expected_prev )
		&& ((A3_expected_prev !== last_A3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A3_expected_prev);
		$display ("     Real value = %b", A3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_A3_exp = A3_expected_prev;
	end
	if (
		( M_expected_prev !== 1'bx ) && ( M_prev !== M_expected_prev )
		&& ((M_expected_prev !== last_M_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_M_exp = M_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cod9a4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg N0;
reg N1;
reg N2;
reg N3;
reg N4;
reg N5;
reg N6;
reg N7;
reg N8;
reg N9;
// wires                                               
wire A0;
wire A1;
wire A2;
wire A3;
wire M;

wire sampler;                             

// assign statements (if any)                          
Cod9a4 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.M(M),
	.N0(N0),
	.N1(N1),
	.N2(N2),
	.N3(N3),
	.N4(N4),
	.N5(N5),
	.N6(N6),
	.N7(N7),
	.N8(N8),
	.N9(N9)
);

// N9
initial
begin
	repeat(16)
	begin
		N9 = 1'b0;
		N9 = #30000 1'b1;
		# 30000;
	end
	N9 = 1'b0;
	N9 = #30000 1'b1;
end 

// N8
initial
begin
	repeat(8)
	begin
		N8 = 1'b0;
		N8 = #60000 1'b1;
		# 60000;
	end
	N8 = 1'b0;
end 

// N7
initial
begin
	repeat(4)
	begin
		N7 = 1'b0;
		N7 = #120000 1'b1;
		# 120000;
	end
	N7 = 1'b0;
end 

// N6
initial
begin
	repeat(2)
	begin
		N6 = 1'b0;
		N6 = #240000 1'b1;
		# 240000;
	end
	N6 = 1'b0;
end 

// N5
initial
begin
	N5 = 1'b0;
	N5 = #480000 1'b1;
	N5 = #480000 1'b0;
end 

// N4
initial
begin
	N4 = 1'b0;
	N4 = #960000 1'b1;
end 

// N3
initial
begin
	N3 = 1'b0;
end 

// N2
initial
begin
	N2 = 1'b0;
end 

// N1
initial
begin
	N1 = 1'b0;
end 

// N0
initial
begin
	N0 = 1'b0;
end 

Cod9a4_vlg_sample_tst tb_sample (
	.N0(N0),
	.N1(N1),
	.N2(N2),
	.N3(N3),
	.N4(N4),
	.N5(N5),
	.N6(N6),
	.N7(N7),
	.N8(N8),
	.N9(N9),
	.sampler_tx(sampler)
);

Cod9a4_vlg_check_tst tb_out(
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.M(M),
	.sampler_rx(sampler)
);
endmodule

