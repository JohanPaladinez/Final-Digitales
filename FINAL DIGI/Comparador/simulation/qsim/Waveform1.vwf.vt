// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2023 19:10:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Comparador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Comparador_vlg_sample_tst(
	B0,
	B1,
	B2,
	B3,
	sampler_tx
);
input  B0;
input  B1;
input  B2;
input  B3;
output sampler_tx;

reg sample;
time current_time;
always @(B0 or B1 or B2 or B3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Comparador_vlg_check_tst (
	D0,
	U0,
	U1,
	U2,
	U3,
	sampler_rx
);
input  D0;
input  U0;
input  U1;
input  U2;
input  U3;
input sampler_rx;

reg  D0_expected;
reg  U0_expected;
reg  U1_expected;
reg  U2_expected;
reg  U3_expected;

reg  D0_prev;
reg  U0_prev;
reg  U1_prev;
reg  U2_prev;
reg  U3_prev;

reg  D0_expected_prev;
reg  U0_expected_prev;
reg  U1_expected_prev;
reg  U2_expected_prev;
reg  U3_expected_prev;

reg  last_D0_exp;
reg  last_U0_exp;
reg  last_U1_exp;
reg  last_U2_exp;
reg  last_U3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	D0_prev = D0;
	U0_prev = U0;
	U1_prev = U1;
	U2_prev = U2;
	U3_prev = U3;
end

// update expected /o prevs

always @(trigger)
begin
	D0_expected_prev = D0_expected;
	U0_expected_prev = U0_expected;
	U1_expected_prev = U1_expected;
	U2_expected_prev = U2_expected;
	U3_expected_prev = U3_expected;
end



// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected U3
initial
begin
	U3_expected = 1'bX;
end 

// expected U2
initial
begin
	U2_expected = 1'bX;
end 

// expected U1
initial
begin
	U1_expected = 1'bX;
end 

// expected U0
initial
begin
	U0_expected = 1'bX;
end 
// generate trigger
always @(D0_expected or D0 or U0_expected or U0 or U1_expected or U1 or U2_expected or U2 or U3_expected or U3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D0 = %b | expected U0 = %b | expected U1 = %b | expected U2 = %b | expected U3 = %b | ",D0_expected_prev,U0_expected_prev,U1_expected_prev,U2_expected_prev,U3_expected_prev);
	$display("| real D0 = %b | real U0 = %b | real U1 = %b | real U2 = %b | real U3 = %b | ",D0_prev,U0_prev,U1_prev,U2_prev,U3_prev);
`endif
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( U0_expected_prev !== 1'bx ) && ( U0_prev !== U0_expected_prev )
		&& ((U0_expected_prev !== last_U0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U0_expected_prev);
		$display ("     Real value = %b", U0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_U0_exp = U0_expected_prev;
	end
	if (
		( U1_expected_prev !== 1'bx ) && ( U1_prev !== U1_expected_prev )
		&& ((U1_expected_prev !== last_U1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U1_expected_prev);
		$display ("     Real value = %b", U1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_U1_exp = U1_expected_prev;
	end
	if (
		( U2_expected_prev !== 1'bx ) && ( U2_prev !== U2_expected_prev )
		&& ((U2_expected_prev !== last_U2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U2_expected_prev);
		$display ("     Real value = %b", U2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_U2_exp = U2_expected_prev;
	end
	if (
		( U3_expected_prev !== 1'bx ) && ( U3_prev !== U3_expected_prev )
		&& ((U3_expected_prev !== last_U3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U3_expected_prev);
		$display ("     Real value = %b", U3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_U3_exp = U3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Comparador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg B0;
reg B1;
reg B2;
reg B3;
// wires                                               
wire D0;
wire U0;
wire U1;
wire U2;
wire U3;

wire sampler;                             

// assign statements (if any)                          
Comparador i1 (
// port map - connection between master ports and signals/registers   
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.D0(D0),
	.U0(U0),
	.U1(U1),
	.U2(U2),
	.U3(U3)
);

// B0
always
begin
	B0 = 1'b0;
	B0 = #1000 1'b1;
	#1000;
end 

// B1
always
begin
	B1 = 1'b0;
	B1 = #2000 1'b1;
	#2000;
end 

// B2
always
begin
	B2 = 1'b0;
	B2 = #4000 1'b1;
	#4000;
end 

// B3
initial
begin
	repeat(62)
	begin
		B3 = 1'b0;
		B3 = #8000 1'b1;
		# 8000;
	end
	B3 = 1'b0;
end 

Comparador_vlg_sample_tst tb_sample (
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.sampler_tx(sampler)
);

Comparador_vlg_check_tst tb_out(
	.D0(D0),
	.U0(U0),
	.U1(U1),
	.U2(U2),
	.U3(U3),
	.sampler_rx(sampler)
);
endmodule

